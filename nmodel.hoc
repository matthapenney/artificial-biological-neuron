//load_file("nrngui.hoc")
//cvode_active(1)

xopen("4NPY.hoc")             // geometry file
xopen("fixnseg.hoc")       

Rm = 56000
RmDend = Rm
RmSoma = Rm
RmAx = Rm

Cm    = 1
CmSoma= Cm
CmAx  = Cm
CmDend = Cm

RaAll= 150
RaSoma=150  
RaAx = 50

Vrest = -65
dt = 0.025

celsius = 35.0 

gna = .02
gkdr = .004		//K-delayed rectifier channel variable
ghd=.00001		// I-h channel parameter (mho/cm2)
gHCN = .0006	//


 
KMULT =  0.03*.01	//K-A variable - fast inactiavting A-type current
KMULTP = 0.06
AXONM = 5
KIAHP = .0004
GKV1 = .011

ekval = -90
enaval = 55
eHCNval = -30
eleakval = 	Vrest 


objref g, b,c, stim, distrx, distry, cdistry, p,k,o, zz


forsec "soma" {insert pas e_pas=Vrest g_pas = 1/RmSoma Ra=RaSoma cm=CmSoma}
forsec "dend"{insert pas e_pas=Vrest g_pas = 1/RmDend Ra=RaAll cm=CmDend}

access soma

freq=50
geom_nseg()
tot=0
forall {tot=tot+nseg}
distance()

tstop=1000
rel=0.5


newPlotV()  //open voltage axis that shows plot real time


forsec "soma" {   
		insert hd ghdbar_hd=ghd	vhalfl_hd=-81
                insert na3 gbar_na3=gna
                insert kap gkabar_kap = KMULTP
        		insert iAHP gkbar_iAHP ek = ekval
        		insert kdr gkdrbar_kdr = gkdr ek=ekval
        		insert Kv1 gbar_Kv1 = GKV1
		insert ds
}


forsec "dend" {
	insert ds
		insert hd ghdbar_hd=ghd vhalfl_hd=-81
                insert na3 gbar_na3=gna
                insert kdr gkdrbar_kdr=gkdr
		insert kap gkabar_kap=0
		insert kad gkabar_kad=0

		for (x) if (x>0 && x<1) { xdist = distance(x)
                	ghdbar_hd(x) = ghd*(1+3*xdist/100)
                		if (xdist > 100){
					vhalfl_hd=-81
                        		gkabar_kad(x) = KMULT*(1+xdist/100)
                			} else {
					vhalfl_hd=-73
                        		gkabar_kap(x) = KMULTP*(1+xdist/100)
               				}
		}
}

proc init() {
	t=0
        forall {
        v=Vrest
        if (ismembrane("nax") || ismembrane("na3")) {ena=55}
        if (ismembrane("kdr") || ismembrane("kap") || ismembrane("kad")) {ek=-90}
        if (ismembrane("hd") ) {ehd_hd=-30}
	}
	finitialize(Vrest)
        fcurrent()

        forall {
	for (x) {
	if (ismembrane("na3")||ismembrane("nax")){e_pas(x)=v(x)+(ina(x)+ik(x))/g_pas(x)}
	if (ismembrane("hd")) {e_pas(x)=e_pas(x)+i_hd(x)/g_pas(x)}
		}
	}
	
}


	distrx=new Vector()
	distry=new Vector()
	dend[95] {
		for (x) if (x>0 && x<1) {
			if (diam>=0) {
			distrx.append(distance(x)) 
			distry.append(vmax_ds(x)-Vrest)
			}
		}
	}
	dend[84] {
		for (x) if (x>0 && x<1) {
			if (diam>=0) {
			distrx.append(distance(x)) 
			distry.append(vmax_ds(x)-Vrest)
			}
		}
	}
	
	dend[85] {
		for (x) if (x>0 && x<1) {
			if (diam>=0) {
			distrx.append(distance(x)) 
			distry.append(vmax_ds(x)-Vrest)
			}
		}
	}
	dend[93] {
		for (x) if (x>0 && x<1) {
			if (diam>=0) {
			distrx.append(distance(x)) 
			distry.append(vmax_ds(x)-Vrest)
			}
		}
	}
	
stdinit()
zz = new Impedance()// this little chunk of code modified from Ted & Michael's MRF tutorial
soma zz.loc(0.5) 
zz.compute(0)  // DC input R
soma {rn = zz.input(0.5) }// Input resistance in MegaOhms
printf("%g\n", rn)


objref spkt, netcon, nil, savdata_1, savdata_2, savdata_3, isivec
spkt = new Vector()   
objectvar stim

stim = new IClamp(0.5)
stim.dur = 500
stim.amp = (0.5*.1)*i	//i refers to loop in "figure4cloop"
stim.del = 250


	netcon = new NetCon(&v(0.5), nil)
	netcon.threshold = 0
	netcon.record(spkt)
objref netcon

run()

isivec = spkt.c
if (isivec.size >1)	{
	isivec.deriv  //calculation of interspike interval
	isivec.printf("%g\n")
	printf("%g\n", 0.05*i)  //print stimulus values	
} else 	{
	printf("%g\n", 0.05*i)
} 

savdata_1 = new File()
//savdata_2 = new File()
//savdata_3 = new File()

strdef strng
sprint(strng, "ISI_%g.dat",i)


savdata_1.wopen(strng)
//savdata_2.wopen(strng)
//savdata_3.wopen(strng)

savdata_1.printf("%g\n", spkt.size())		//writes size of spike vector

		for idk = 0, isivec.size - 1 {
			savdata_1.printf("%g\n",isivec.x[idk])	//writes interspike interval data to file
		}

savdata_1.close
//savdata_2.close
//savdata_3.close



